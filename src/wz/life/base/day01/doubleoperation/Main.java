package wz.life.base.day01.doubleoperation;

/**
 * @DESCRIPTION 浮点数运算
 *
 *
浮点数运算和整数运算相比，只能进行加减乘除这些数值计算，不能做位运算和移位运算。

在计算机中，浮点数虽然表示的范围大，但是，浮点数有个非常重要的特点，就是浮点数常常无法精确表示。

举个栗子：

浮点数0.1在计算机中就无法精确表示，因为十进制的0.1换算成二进制是一个无限循环小数，很显然，无论使用float还是double，都只能存储一个0.1的近似值。但是，0.5这个浮点数又可以精确地表示。

因为浮点数常常无法精确表示，因此，浮点数运算会产生误差：


小结
浮点数常常无法精确表示，并且浮点数的运算结果可能有误差；

比较两个浮点数通常比较它们的绝对值之差是否小于一个特定值；

整型和浮点型运算时，整型会自动提升为浮点型；

可以将浮点型强制转为整型，但超出范围后将始终返回整型的最大值。

 *
 * @AUTHOR: jamesbean
 * @DATE: 2020/9/27 1:36 上午
 */
public class Main {

    public static void main(String[] args) {

        /**
         * 1.浮点数运算误差
         *
         * */
        // 浮点数运算误差
        double x = 1.0 / 10;
        double y = 1 - 9.0 / 10;

        System.out.println(x);
        System.out.println(y);

        //由于浮点数存在运算误差，所以比较两个浮点数是否相等常常会出现错误的结果
        //正确的比较方法是判断两个浮点数之差的绝对值手小于很小的一个数，例如：

        double r = Math.abs(x - y);
        if(r < 0.00001){
            //可以认为相等
        } else {
            //不相等
        }

        //浮点数在内存的表示方法和整数比更加复杂。Java的浮点数完全遵循IEEE-754标准，
        //这也是绝大多数计算机平台都支持的浮点数标准表示方法。

        /**
         * 2.类型提升
         * 如果参与运算的两个数其中一个是整型
         * 那么整型可以自动提升到浮点型
         */

        int n = 5;
        double d = 1.2 + 24.0 / n;
        //6.0
        System.out.println(d);


        //!!!需要注意的是
        //在一个复杂的四则运算中,连个整数的运算不会出现自动提升的情况，例如：
        double e = 1.2 + 24 / 5;
        //5.2
        System.out.println(e);

        /**
         * 3.溢出
         * 整数运算在除数为0的时候会运行报错，而浮点运算在除数为0时，不会报错，但会返回几个特殊的值
         *
         */
        double f = 0.0 / 0;
        double f2 = 1.0 / 0;
        double f3 = -1.0 / 0;
        //f: NaN f2: Infinity f3:-Infinity
        System.out.println("f: " + f + " f2: " + f2 +" f3:" + f3);

        /**
         * 4.强转类型
         * 可以将浮点数强制转换为整数，在转型的时候，浮点数的小数部分会被丢掉
         * 如果转型后超过了整型能表示的最大范围，将返回整型的最大值
         */
        int n1 = (int)12.3;
        int n2 = (int)12.7;
        int n3 = (int)-12.7;
        int n4 = (int)(12.7+0.5);
        int n5 = (int)1.3e20;
        //n1: 12 n2: 12 n3:-12 n4:13 n5:2147483647
        System.out.println("n1: " + n1 + " n2: " + n2 + " n3:" + n3 + " n4:" + n4 + " n5:" + n5);


        //四舍五入
        double g = 2.6;
        int h = (int)(g + 0.5);
        //3
        System.out.println(h);








    }
}
